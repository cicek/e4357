BEGIN
--------------------------------------------------------------------
Q1: Is there any compile error with the following code (if any)?

	unsigned int Arr[16];
	3[Arr] = 7; 
 
Explain:

No, because the “3[Arr] = 7;” line equates a cell in the memory to 7 
which can be  represented as following equally:
 
Arr[3] -> *(Arr+3)
3[Arr] -> *(3+Arr)


--------------------------------------------------------------------
Q2: What is the difference between the following 3 statements? 

const int * px; 
int const * px; 
int * const px; 

Is there any compile error for the following cases?
case1: 
int x = 13; 
const int * px; 
px = & x; 

case 2: 
int x = 13; 
int const * px; 
px = & x; 

case 3: 
int x = 13; 
int * const px; 
px = & x; 

Explain:

const int * px; -> px is a non-constant pointer to constant data
int const * px; -> pointer to a constant data
int * const px; -> px is a constant pointer to non-constant data

Here, the code the code tries to change the pointer.
case 1 and 2 runs ok, because in these cases pointer is not constant.
But, case 3 gives error, as the pointer is a const in case 3.   


--------------------------------------------------------------------
Q3: Write a function to set or clear ith bit of a 32-bit register. 
	Where ith (0-based) := {0, 1, 2, …, 31 } 
void reg_set(volatile unsigned int * pReg, int ith) 
{ 
} 

void reg_clear(volatile unsigned int * pReg, int ith) 
{ 
} 


Answer:

void reg_set(volatile unsigned int * pReg, int ith) 
{ 
	return *pReg |= (1 << ith);
} 

void reg_clear(volatile unsigned int * pReg, int ith) 
{ 
	return *pReg &= ~(1 << ith);
} 

--------------------------------------------------------------------
Q4: Write a swap function in C.
void swap(unsigned int * px, unsigned int *py) { 
} 

Answer:
void swap(unsigned int * px, unsigned int *py) { 
	int temp = * px;
	* px = * py;
	* py = temp;
} 

--------------------------------------------------------------------
Q5:	What is the output of the following code? (Given: sizeof(unsigned int) is 4) Page 34 

unsigned int Arr[16]; 
unsigned int a0 = (unsigned int) &Arr[0]; 
unsigned int a3 = (unsigned int) &Arr[3]; 
printf(“%d\n”, a3 – a0); 

Answer:

It is 3*4 = 12. a0 and a3 represents addresses of array cells which are 3 cells apart from each other.
The array is defined for unsigned int, so each cell has a size of 4 bits.
